<?xml-model href="https://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng"
            type="application/xml"
            schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="https://www.tei-c.org/release/xml/tei/custom/schema/relaxng/tei_odds.rng"
            type="application/xml"
            schematypens="http://purl.oclc.org/dsdl/schematron"?>
<TEI xmlns="http://www.tei-c.org/ns/1.0" xmlns:sch="http://purl.oclc.org/dsdl/schematron"
  xmlns:mei="http://www.music-encoding.org/ns/mei" xml:lang="en" n="testms">
  <teiHeader>
    <fileDesc>
      <titleStmt>
        <title>TEI for Libretti</title>
        <author>Mark Saccomano</author>
      </titleStmt>
      <publicationStmt>
        <p/>
      </publicationStmt>
      <!--      <publicationStmt>
        <publisher>TEI Consortium</publisher>
        <availability status="free">
          <licence target="http://creativecommons.org/licenses/by-sa/3.0/">
          Distributed under a Creative Commons Attribution-ShareAlike
          3.0 Unported License</licence>
+
          <p>TEI material can be licensed differently depending on the
          use you intend to make of it. Hence it is made available
          under both the CC+BY and BSD-2 licences. The CC+BY licence
          is generally appropriate for usages which treat TEI content
          as data or documentation. The BSD-2 licence is generally
          appropriate for usage of TEI content in a software
          environment. For further information or clarification,
          please contact the <ref target="mailto:info@tei-c.org">TEI
          Consortium</ref>.</p>
        </availability>
      </publicationStmt>-->
      <sourceDesc>
        <p>Written from scratch.</p>
      </sourceDesc>
    </fileDesc>
    <encodingDesc>
      <projectDesc>
        <p/>
      </projectDesc>
    </encodingDesc>
  </teiHeader>
  <text>
    <body>
      <p>TEI for Libretti</p>

      <schemaSpec ident="tei_romaLib" start="TEI" prefix="tei_" targetLang="en" docLang="en"
        defaultExceptions="http://www.tei-c.org/ns/1.0 teix:egXML http://www.music-encoding.org/ns/mei">

        <moduleSpec ident="libretto">
          <desc>Customization for opera libretto</desc>
        </moduleSpec>

        <moduleRef key="tei"/>
        <moduleRef key="core" include="add author bibl choice corr date editor head hi l lg
          name note p pb publisher quote resp respStmt sic sp speaker stage title"/>
        <moduleRef key="header"/>
        <moduleRef key="libretto"/>
        <!-- removing mostly epistolary elements -->
        <moduleRef key="textstructure" exclude="argument closer floatingText 
          opener postscript salute signed"/>
        <!-- keeping all performance elements, making sure can accomodate
             video opera such as Perfect Lives-->
        <moduleRef key="drama"/>
        <moduleRef key="verse"/>
        <moduleRef key="textcrit"/>
        <moduleRef key="linking"/>
        <!-- keeping the entire namesdates module here. includes location elements -->
        <moduleRef key="namesdates"/>
        <moduleRef key="figures"/>
        <moduleRef key="transcr" include="facsimile graphic sourceDoc surface surfaceGrp zone"/>
        <!-- optional: include manuscript description module -->
        <!-- <moduleRef key="msdescription"/> -->
        <!--        <moduleRef key="figures"/>
        <!-\- <particDesc> ? necessary? Would be only 'corpus' module element -\->-->


        <elementSpec ident="sg" module="libretto" mode="add">
          <desc>Contains a sequence of lines grouped into a stanza or other larger structure.</desc>
          <classes>
            <memberOf key="model.libretto"/>
            <memberOf key="model.divPart.drama"/>
            <memberOf key="model.global"/>
            <memberOf key="model.performerLike"/>
            <memberOf key="model.episodePart"/>
            <memberOf key="att.ascribed.directed"/>
            <memberOf key="att.global"/>
          </classes>
          <content>
            <sequence>
              <elementRef key="singer" minOccurs="0" maxOccurs="unbounded"/>
              <alternate minOccurs="1" maxOccurs="unbounded">
                <elementRef key="lg"/>
                <elementRef key="stage"/>
                <elementRef key="note"/>
              </alternate>
            </sequence>
          </content>

          <attList>
            <attDef ident="who" mode="change">
              <desc>References the character associated with this sung passage.</desc>
              <!--          <datatype>
                <dataRef name="IDREFS"/>
              </datatype>-->
            </attDef>
            <attRef name="att.global"/>
          </attList>
        </elementSpec>

        <elementSpec ident="singer" module="libretto" mode="add">
          <desc>Contains a specialized form of heading or label for the singer or singers of a sung
            fragment; analogous to &lt;speaker&gt;.</desc>
          <classes>
            <memberOf key="model.global"/>
            <memberOf key="model.labelLike"/>
            <memberOf key="model.limitedPhrase"/>
          </classes>
          <content>
            <classRef key="macro.phraseSeq"/>
          </content>
        </elementSpec>

        <!--< role voice solution in TEI, create new element -->
        <!--    <elementSpec ident="voice" module="libretto" mode="add">
          <desc>Vocal designation of the role, e.g., soprano, alto, tenor, etc.</desc>
          <classes>
            <memberOf key="model.global"/>
            <memberOf key="model.descLike"/>
          </classes>
          <content>
            <classRef key="macro.phraseSeq"/>
          </content>
        </elementSpec>-->

        <elementSpec ident="perfRes" module="libretto" mode="add"
          ns="http://www.music-encoding.org/ns/mei">
          <desc>Vocal designation of the role, e.g., soprano, alto, tenor, etc.</desc>
          <classes>
            <memberOf key="att.global"/>
            <!--<memberOf key="model.descLike"/>-->
          </classes>
          <content>
            <!--<classRef key="macro.phraseSeq"/>-->
            <textNode/>
          </content>
        </elementSpec>

        <elementSpec ident="castItem" module="drama" mode="change">
          <content>
            <sequence maxOccurs="unbounded">
              <elementRef key="role" minOccurs="0"/>
              <elementRef key="perfRes" minOccurs="0"/>
              <elementRef key="roleDesc" minOccurs="0"/>
            </sequence>
          </content>
        </elementSpec>

        <constraintSpec ident="libretto-rules" scheme="schematron">
          <constraint>
            <sch:schema>
              <sch:pattern>
                <sch:rule context="tei:sg">
                  <sch:assert test="@who"> Each &lt;sg&gt; element must have a @who attribute
                    <sch:assert test="@who and matches(@who, '^#') and not(matches(@who, '^#[a-z]+$'))">
                      Each @who reference must be lower case</sch:assert>
                  </sch:assert>
                </sch:rule>
              </sch:pattern>
            </sch:schema>
          </constraint>
        </constraintSpec>

        <!-- 
                 
                            <sch:pattern id="speakerID">
                              <sch:rule context="tei:sp">
                                <sch:assert test="@who">
                                  Each &lt;sp&gt; element must have a @who attribute
                                </sch:assert>
                                <sch:assert test="@who and matches(@who, '^#')">
                                  The @who attribute is required and must begin with "#".
                                </sch:assert>
            
            <!-/-sch:assert test="@who and matches(@who, '^#') and not(matches(@who, '^#[a-z]+$'))">Each @who reference must be lower case</sch:assert>-/->
          </sch:rule>
        </sch:pattern>
    <constraintSpec ident="libretto-rules" scheme="schematron">
      <desc>Custom Schematron rules for libretto validation</desc>
        <constraint>
          <sch:schema xmlns:sch="http://purl.oclc.org/dsdl/schematron"
            xmlns:tei="http://www.tei-c.org/ns/1.0"
            queryBinding="xslt2">
          <sch:pattern>
            <sch:rule context="tei:pb">
              <sch:assert test="@n">Each &lt;pb&gt; element must have an @n attribute.</sch:assert>
            </sch:rule>
          </sch:pattern>          
          </sch:schema>
        </constraint>
    </constraintSpec>

https://www.tei-c.org/release/doc/tei-p5-doc/en/html/ref-stage.html#tei_att.type
Note	
*If the value mixed is used, it must be the only value. Multiple values may however be supplied if a single stage direction performs multiple functions, for example is both an entrance and a modifier.
*The who attribute may be used to indicate more precisely the person or persons participating in the action described by the stage direction.


        <sch:pattern id="stageType">
          <sch:rule context="tei:stage">
            <sch:assert test="@type">
              Every &lt;stage&gt; element must have a @type attribute
            </sch:assert>
            <sch:assert test="every $t in tokenize(@type, '\s+') satisfies $t = 
              ('setting', 'entrance', 'exit', 'business', 'novelistic', 'delivery', 'modifier', 'location', 'mixed')">
              @type must be one of TEI recommended values: 
              setting, entrance, exit, business, novelistic, delivery, modifier
            </sch:assert>
            <sch:assert test="normalize-space(@type)">
              @type cannot be empty
            </sch:assert>
          </sch:rule>
        </sch:pattern>
              </sch:schema>
          </constraint>
        </constraintSpec> -->

      </schemaSpec>
    </body>
  </text>
</TEI>
